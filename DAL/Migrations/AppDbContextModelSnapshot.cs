// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("Domain.BoardRow", b =>
                {
                    b.Property<int>("BoardRowId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameBoardId");

                    b.HasKey("BoardRowId");

                    b.HasIndex("GameBoardId");

                    b.ToTable("BoardRows");
                });

            modelBuilder.Entity("Domain.Cell", b =>
                {
                    b.Property<int>("CellId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BoardRowId");

                    b.Property<int>("CellStatus");

                    b.HasKey("CellId");

                    b.HasIndex("BoardRowId");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PlayerOneId");

                    b.Property<int>("PlayerTwoId");

                    b.Property<int?>("TurnPlayerId");

                    b.Property<int?>("WinnerPlayerId");

                    b.HasKey("GameId");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.HasIndex("TurnPlayerId");

                    b.HasIndex("WinnerPlayerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Domain.GameBoard", b =>
                {
                    b.Property<int>("GameBoardId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Height");

                    b.Property<int>("Width");

                    b.HasKey("GameBoardId");

                    b.ToTable("GameBoards");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FiringBoardGameBoardId");

                    b.Property<int?>("GameBoardId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("PlayerId");

                    b.HasIndex("FiringBoardGameBoardId");

                    b.HasIndex("GameBoardId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CellState");

                    b.Property<int>("Hits");

                    b.Property<int>("IsPlaced");

                    b.Property<string>("Name");

                    b.Property<int>("PlayerId");

                    b.Property<int>("Width");

                    b.HasKey("ShipId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Domain.BoardRow", b =>
                {
                    b.HasOne("Domain.GameBoard", "Board")
                        .WithMany("Board")
                        .HasForeignKey("GameBoardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Cell", b =>
                {
                    b.HasOne("Domain.BoardRow", "BoardRow")
                        .WithMany("Row")
                        .HasForeignKey("BoardRowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.HasOne("Domain.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Player", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Player", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnPlayerId");

                    b.HasOne("Domain.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerPlayerId");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.HasOne("Domain.GameBoard", "FiringBoard")
                        .WithMany()
                        .HasForeignKey("FiringBoardGameBoardId");

                    b.HasOne("Domain.GameBoard", "GameBoard")
                        .WithMany()
                        .HasForeignKey("GameBoardId");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.HasOne("Domain.Player", "Player")
                        .WithMany("Ships")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
